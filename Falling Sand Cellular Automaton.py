#Falling Sand Simulation V2

#importing modules
from turtle import *
from random import randint, choice
from time import sleep


#creating window
wn = Screen()
wn.colormode(255)
wn.bgcolor("black")
wn.setup(600, 402)
wn.tracer(0)


#Material class
class Material(Turtle):
    def __init__(self, x, y, color):
        Turtle.__init__(self)
        self.up()
        self.color(color)
        self.shape("square")
        self.shapesize(0.5)
        self.setpos(x, y)

    def fall(self):
        go_to_y = self.ycor() - 10

        #checking if the cell below is empty
        if (self.xcor(), go_to_y) not in taken_up:
            self.goto(self.xcor(), go_to_y)
            ontimer(self.fall, 20)

        #checking if the cell below, the cell below and to the left
        #and the cell below to the right are all filled
        elif (self.xcor() - 10, go_to_y) in taken_up and \
            (self.xcor(), go_to_y) in taken_up and \
            (self.xcor() + 10, go_to_y) in taken_up:
            taken_up.append((self.xcor(), self.ycor()))

        #checking if the cell below to the left and the cell below
        #to the right are both empty
        elif (self.xcor() - 10, go_to_y) not in taken_up and \
            (self.xcor(), go_to_y) in taken_up and \
            (self.xcor() + 10, go_to_y) not in taken_up:

            #choosing to go either left or right
            go_to_x = randint(0, 1)
            if go_to_x == 0:
                self.setpos(self.xcor() - 10, self.ycor())
                ontimer(self.fall, 20)
            else:
                self.setpos(self.xcor() + 10, self.ycor())
                ontimer(self.fall, 20)

        #checking if the cell to the left is empty and the cell
        #to the right is filled
        elif (self.xcor() - 10, go_to_y) not in taken_up and \
            (self.xcor(), go_to_y) in taken_up and \
            (self.xcor() + 10, go_to_y) in taken_up:
            self.setpos(self.xcor() - 10, go_to_y)
            ontimer(self.fall, 20)

        #checking if the cell to the right is empty and the cell
        #to the left is filled
        elif (self.xcor() - 10, go_to_y) in taken_up and \
            (self.xcor(), go_to_y) in taken_up and \
            (self.xcor() + 10, go_to_y) not in taken_up:
            self.setpos(self.xcor() + 10, go_to_y)
            ontimer(self.fall, 20)
        

#creating class objects
rock = Material(0, 0, "grey")
taken_up = []

circle = Turtle()
circle.up()
circle.color("white", "black")
circle.shape("circle")
circle.shapesize(2)
circle.setpos(-5, 170)

sand =  []
set_x = (-5)
set_y = (145)

colors = [
    (252, 201, 100), (255, 231, 92),
    (251, 235, 71), (251, 209, 59),
    (251, 222, 96), (251, 222, 50)
    ]

#place sand function
def place(x, y):
    global set_x, set_y
    if x > -235 and x < 240:
        if x > 0:
            set_x = int(round(x/10, 0)*10)+5
            set_y = int(round(y/10, 0)*10)-5
        else:
            set_x = int(round(x/10, 0)*10)-5
            set_y = int(round(y/10, 0)*10)-5

        circle.setpos(set_x, set_y+25)


#add sand function
def add():
    sand.append(Material(set_x, set_y, choice(colors)))
    ontimer(sand[len(sand)-1].fall, 20)


#keybinding
listen()
onscreenclick(place)
onkeypress(add, "space")


#creating environment
env = [
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□","□","□","□","□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□","□","□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□","□","□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□","□","□","□",[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□","□",[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□","□","□","□","□","□","□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□",[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ],"□"],
    ["□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□","□"]
    
    ]

def create_environment(env):
    for y in range(len(env)):
        for x in range(len(env[y])):
            if env[y][x] == "□":
                env_x = -245 + (x*10)
                env_y = 145 - (y*10)
                rock.goto(env_x, env_y)
                rock.stamp()
                taken_up.append((env_x, env_y))

create_environment(env)

#main loop
while True:
    wn.update()
